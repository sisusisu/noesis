<?xml version="1.0"  encoding="ISO-8859-1" ?> 
<?xml-stylesheet type="text/xsl" href="../book.xsl"?>

<!-- Graph connectivity -->

<document>
<tag>graph-theory-connectivity</tag>
<title>Graph connectivity</title>


<text>
Graphs are sparse when existing edges represent a small fraction of the possible vertex pairs. They are dense when there are edges between most vertex pairs. Dense graphs typically have a quadratic number of edges, whereas sparse graphs are linear in size. The application domain often imposes limits of the number of edges that are incident on any given node within the graph, hence most real-world graphs are actually sparse.
</text>


<document>
<tag>graph-theory-paths</tag>
<title>Paths and cycles</title>

<!-- Walks, trails, and paths -->

<text>
A walk is a sequence of adjacent edges in a graph. Formally, a sequence of edges <eqn>(e_1, ..., e_n)</eqn> is a walk is there are vertices <eqn>v_0, ..., v_n</eqn> such that <eqn>e_i = v_{i-1}v{i}</eqn> for <eqn>i = 1..n</eqn>. For the sake of simplicity, we can specify a walk by its sequence of vertices <eqn>(v0, ..., vn)</eqn>, provided that <eqn>v_{i-1}v_i</eqn> is an edge in the graph for <eqn>i = 1..n</eqn>. Given a walk <eqn>(v0, ..., vn)</eqn>, <eqn>v_0</eqn> is said to be its start vertex, <eqn>v_n</eqn> is its end vertex, and <eqn>n</eqn> is its length. When the start vertex and the end vertex are the same, i.e. <eqn>v_0 = v_n</eqn>, the walk is said to be a closed walk. 

++ SNA: start vertex (origin), end vertex (terminus)
</text>

<text>
When all the edges in a walk are distinct, the walk is called a trail. Consequently, a closed walk without repeating edges is a closed trail.
</text>

<text>
When, both edges and nodes are distinct, the trail becomes a path. It should be noted that any walk always contains a path from its start vertex to its end vertex (plus some optional detours). 
</text>

<equation>
paths \subset trails \subset walks
</equation>


<!-- @ directed graphs -->

<text>
- A sequence of edges (e1, . . . , en) is called a trail if the corresponding sequence of edges in the underlying graph |G| is a trail.
- If (v0, . . . , vn) is the corresponding sequence of vertices, vi-1vi or vivi-1 must be an edge of G. In the first case,
we have a forward edge, in the second a backward edge.
- If a trail consists of forward edges only, it is called a directed trail;
- any directed walk W with start vertex a and end vertex b, where a \neq b, contains a directed path from a to b.
</text>


<text>
Inverse walk: <eqn>W^{-1}</eqn>, from the destination to the origin
</text>

<!-- @ weighted graphs -->

<text>
Paths: value (min), length/distance/cost/weight (sum) of the weights of its edges
</text>


<!-- Cycles -->

<text>
A cycle (or circuit) is a closed trail with <eqn>n \geq 3</eqn> and distinct nodes (except, of course, <eqn>v_0 = v_n</eqn>). 
</text>

<text>
Any closed walk of
odd length necessarily contains a cycle, whereas some closed walks of even length do not contain cycles (e.g. jumping from the starting node to one of its neighbors and returning back to it). 

+ any directed closed walk contains a directed cycle.
</text>

<text>
A cycle of length three is called a triangle.  ++transitive relationships
</text>

<text>
Acyclic graphs do not contain any cycles. ++ important classes: DAGs, trees
</text>


<text>
a.k.a. semiwalks/semipaths/semicycles (ignoring arc orientation) <eqn>X \subset semiX</eqn>
</text> 

<!-- Reachability -->

<text>
When a path exists from v to w, we say that w is reachable from v.
</text>

<document>
<tag>graph-theory-eulerian</tag>
<title>Eulerian circuits</title>

<text>
The Königsberg bridge problem studied by Euler in 1736, which originated the study of graph theory, asked for a circular tour containing every edge in the graph (a multigraph in the Königsberg brige problem, actually, since it contained two pairs of parallel edges). Such circular tours, which traverse every edge in the graph, are called Eulerian circuits.
</text>

<text>
Formally, an Eulerian trail of <eqn>G</eqn> is a trail that contains every edge in <eqn>G</eqn> exactly once. When the trail is closed, it is an Euler tour. A graph is Eulerian when it contains an Euler tour. The terms Eulerian cycle and Eulerian circuit are often used instead of Euler tour, even though an Euler tour can include the same vertices more than once. Likewise, the term Eulerian path is usually employed to refer to Eulerian trails.
</text>

<text>
Euler's theorem characterizes Eulerian graphs <cite>Euler 1736</cite>. Given a connected graph <eqn>G</eqn>, Euler's theorem establishes that the following statements are equivalent:
</text>

<list>
<item>G is Eulerian.</item>
<item>Each vertex in G has even degree.</item>
<item>The edge set of G can be partitioned into cycles.</item>
</list>

<text>
Since Euler tours must traverse all the edges in a graph and each occurrence of a vertex in the Euler tour adds two to its degree, it follows that all vertices must have an even degree. This result proves that the Königsberg bridge problem has no solution, since all the vertices in its associated graph have odd degrees.

N: if there are any vertices of degree greater than two in a network an Eulerian path will have to visit those vertices more than once in order to traverse all their edges

N:  Euler observed that, since any Eulerian path must both enter and leave every vertex it passes through except the first and last, there can at most be two vertices in the network with odd degree if such a path is to exist
</text>

<text>
For directed graphs, an analogue theorem can be obtained. For connected directed graphs, the following statements are equivalent:
</text>

<list>
<item>G has a directed Euler tour.</item>
<item>G is pseudosymmetric, i.e. <eqn>deg_{in}(v)=deg_{out}(v)</eqn> for every vertex.</item>
<item>The edge set of G can be partitioned into directed cycles.</item>
</list>

<text>
I can also be proved that, given a connected graph with exactly <eqn>2k</eqn> vertices of odd degree, with <eqn>k \neq 0</eqn>, the edge set of the graph can be partitioned into <eqn>k</eqn> trails. Taking this into account, it is easy to obtain the following results:
</text>

<list>

<item>
An undirected graph contains an Eulerian circuit iff (1) it is connected, and (2) each vertex is of even degree.
</item>

<item>
An undirected graph contains an Eulerian path iff (1) it is connected, and (2) all but two vertices are of even degree. These two vertices will be the start and end points of any Eulerian path.
</item>

</list>

<text>
Similar results can be derived for directed graphs:
</text>

<list>

<item>
A directed graph contains an Eulerian cycle iff (1) it is strongly-connected, and (2) each vertex has the same in-degree as out-degree.
</item>

<item>
A directed graph contains an Eulerian path from x to y iff (1) it is connected, and (2) all other vertices have the same in-degree as out-degree,
with x and y being vertices with in-degree one less and one more than their out-degrees, respectively.
</item>

</list>

<!-- The line graph of an Eulerian graph is likewise Eulerian, butt the converse is false in general. -->

</document>


<document>
<tag>graph-theory-hamiltonian</tag>
<title>Hamiltonian circuits</title>

<text>
Hamiltonian circuits are somehow related to Euler tours. Whereas every edge is traversed by an Euler tour, Hamiltonian cycles require visiting each node in the graph exactly once.
</text>

<text>
Formally, a Hamiltonian path or traceable path is a path that visits every vertex exactly once. A graph that contains a Hamiltonian path is called a traceable graph. A graph is said to be Hamiltonian-connected if, for every pair of vertices, there is a Hamiltonian path between them. A Hamiltonian cycle, Hamiltonian circuit, vertex tour, or graph cycle is a circuit that visits each vertex exactly once (except the vertex that is both the start and end, which is visited twice). Finally, a graph that contains a Hamiltonian cycle is called a Hamiltonian graph.
</text>

<!-- Any Hamiltonian cycle can be converted to a Hamiltonian path by removing one of its edges, 
but a Hamiltonian path can be extended to Hamiltonian cycle only if its endpoints are adjacent. -->


<text>
Although Euler tours and Hamiltonian circuit look similar, they are quite different problems. While it is easy to find an Euler tour, it is hard to find a Hamiltonian circuit. In fact, there is no nice characterization of Hamiltonian graphs.
</text>

<text>
We know, for instance, that some kinds of graphs are Hamiltonian, including complete graphs <eqn>K_n</eqn> with more than two vertices, every cycle graph, every tournament, and every platonic solid. We also know some sufficient conditions for the existence of a Hamiltonian cycle, usually in the form of statements about the degrees of the vertices in the graph:
</text>

<list>

<item>Dirac's theorem (1952): A graph with more than two vertices is Hamiltonian if every vertex in the graph has degree <eqn>\geq n/2</eqn>.</item>

<item>Ore's theorem (1960): A graph with more than two vertices is Hamiltonian if, for every pair of non-adjacent vertices, the sum of their degrees is n or greater.</item>

<item>Bondy–Chvátal theorem (1972): A graph <eqn>G</eqn> is Hamiltonian if and only if its closure <eqn>[G]</eqn> is Hamiltonian.</item>

</list>

<text>
Given a graph <eqn>G</eqn> defined on <eqn>n</eqn> vertices, its closure <eqn>[G]</eqn> is constructed by successively adding edges <eqn>uv</eqn> to <eqn>G</eqn> for all nonadjacent pairs of vertices <eqn>u</eqn> and <eqn>v</eqn> that satisfy the following condition: <eqn>deg_G(v) + deg_G(u) \geq n</eqn>. In the closure of <eqn>G</eqn>, therefore, for any two non-adjacent vertices <eqn>u</eqn> and <eqn>v</eqn>, we always have <eqn>deg_G(u) + deg_G(v) &lt; n</eqn>.
</text>

<text>
Since complete graphs are Hamiltonian, all graphs whose closure is complete will also be Hamiltonian. This result subsumes Dirac's and Ore's theorems, hence showing that the Bondy-Chvátal theorem theorem generalizes the previous two ones.
</text>

<text>
Similar characterizations can be obtained for directed graphs:
</text>

<list>

<item>
Ghouila-Houiri theorem (1960): A strongly connected simple directed graph <eqn>D</eqn> with <eqn>n</eqn> vertices is Hamiltonian if <eqn>deg_{in}(v) \geq n/2</eqn> and <eqn>deg_{out}(v) \geq n/2</eqn> for all vertices in <eqn>D</eqn>.
</item>

<item>
Meyniel's theorem (1973): A strongly connected simple directed graph with n vertices is Hamiltonian if the sum of the full degrees of two distinct non-adjacent vertices is at least <eqn>2n-1</eqn>, i.e. <eqn>deg(x) + deg(y) \geq 2n-1</eqn> for all pairs of non-adjacent vertices <eqn>x</eqn> and <eqn>y</eqn>.
</item>

</list>

<text>
The number of vertices in these sufficient conditions is doubled with respect to the undirected case because each undirected edge corresponds to two directed arcs and the full degree of a vertex in the directed graph is twice its degree in the undirected graph.
</text>

<!-- The line graph of an Eulerian graph is Hamiltonian: If G is Eulerian, then L(G) is Hamiltonian -->
<!-- The line graph of a Hamiltonian graph is Hamiltonian. -->
<!-- A tournament (with more than 2 vertices) is Hamiltonian if and only if it is strongly connected. -->


<text>
It should be noted that the number of different Hamiltonian cycles in a complete undirected graph on <eqn>n</eqn> vertices is <eqn>(n-1)!/2</eqn>, <eqn>(n-1)!</eqn> in a complete directed graph. Many important problems can be stated as finding the optimal Hamiltonian cycle in some sense and, since no general efficient method is known for finding one, their resolution requires the use of combinatorial optimization techniques. The traveling salesman problem (TSP) is probably the most famous of such problems: planning the minimum cost route for a traveling salesman who must visit <eqn>n</eqn> cities, where cost is typically associated to the traveled distance, even though other optimization criteria could be used (e.g. the time it takes to complete the tour or its actual monetary cost, which might depend on many other factors beyond time and distance). From a formal point of view, the solution to the TSP involves finding the cyclic permutation <eqn>\pi</eqn> of the graph vertex set that minimizes the cost function. Just enumerating the potential solutions is prohibitive in practice, since there are <eqn>(n-1)!</eqn> of them. Actually, there are <eqn>n!</eqn> permutations, but we can always set the starting node of the circuit, hence the <eqn>n</eqn> factor we can save.
</text>


</document>

</document>


<document>
<tag>graph-theory-components</tag>
<title>Connected components</title>

<text>
++ Connected graphs, weakly-connected vs. strongly-connected components (a.k.a. blocks)

+ The connected components of an undirected graph are the equivalence classes of the <q>is reachable</q> from relation.

A graph G is strongly connected if all nodes in G can reach v and are reachable from v.

J: Finally, a directed multigraph G is called connected if the underlying graph |G| is connected.


J: We say that a vertex b of a digraph G is accessible from a vertex a if there is a directed walk with start vertex a and end vertex b. As before, we allow walks to have length 0 so that each vertex is accessible from itself. 

A digraph G is called strongly connected if each vertex is accessible from every other vertex. 

A vertex a from which every other vertex is accessible is called a root of G. Thus a digraph is strongly connected if and only if every vertex is a root.



Weakly-connected and strongly-connected components define unique partitions of the graph nodes.

</text>

<text>
WF: 4 kinds of connectedness
- weakly-connected
- unilaterally connected (in one direction)
- strongly-connected (in both directions)
- recursively-connected (using the same path)
</text>

<text>
N: OUT-COMPONENT

Considerations of this kind lead us to define the out-component, which is the set of vertices that are reachable via directed paths starting at a specified vertex A, and including A itself.
An out-component has the property that edges connecting it to other vertices (ones not in the out-component) only point inward towards the members of component, and never outward (since if they pointed outward then the vertices they connected to would by definition be members of the out-component).
Note that the members of an out-component depend on the choice of the starting vertex. Choose a different starting vertex and the set of reachable vertices may change. Thus an out-component is a property of the network structure and the starting vertex, and not (as with strongly and weakly connected components) of the network structure alone. This means, among other things, that a vertex can belong to more than one different out-component.
A few other points are worth noticing. First, it is self-evident that all the members of the strongly connected component to which a vertex A belongs are also members of A’s out-component. Furthermore, all vertices that are reachable from A are necessarily also reachable from all the other vertices in the strongly connected component. Thus it follows that the out-components of all members of a strongly connected component are identical. It would be reasonable to say that out-components really “belong” not to individual vertices, but to strongly connected components

N: IN-COMPONENT

Very similar arguments apply to vertices from which a particular vertex can be reached. The in-component of a specified vertex A is the set of all vertices from which there is a directed path to A, including A itself. In-components depend on the choice of the specified vertex, and a vertex can belong to more than one in-component, but all vertices in the same strongly connected component have the same in-component. Furthermore, the strongly connected component to which a vertex belongs is a subset of its in-component, and indeed a vertex that is in both the in- and out-components of A is necessarily in the same strongly connected component as A (since paths exist in both directions) and hence A’s strongly connected component is equal to the intersection of its in- and out-components.
</text>

<text>

J:
Two vertices a and b of a graph G are connected if there exists a walk
with start vertex a and end vertex b. If all pairs of vertices of G are connected,
G itself is called connected. 

For any vertex a, we consider (a) as a trivial walk
of length 0, so that any vertex is connected with itself. Thus connectedness
is an equivalence relation on the vertex set of G. 

The equivalence classes of this relation are called the connected components of G. Thus G is connected if
and only if its vertex set V is its unique connected component.

Components which contain only one vertex are also called isolated vertices and such vertices are often called isolates, since their degree is 0. 

- A graph with n vertices and assume that each vertex of G has degree at least (n-1)/2: G must be connected.
- A graph G is connected if and only if there exists an edge e = vw with v in V1 and w in V2 whenever V = V1 U V2 is a decomposition of the vertex set of G.(that is, V1 intersect V2 = empty)

<!--  If G is not connected, the complementary graph G is connected. -->

RESULTS
- A connected graph on n vertices has at least n-1 edges.
- An acyclic graph on n vertices has at most n-1 edges.
</text>

</document>



<document>
<tag>graph-theory-distance</tag>
<title>Distance</title>

<!-- Length / strength / distance -->

<text>
The number of edges in a walk, trail, path, or cycle (i.e. <eqn>n</eqn>) defines its length given the above formal specification, albeit we can relax this definition for weighted graphs. Whereas path lengths correspond to the number of edges paths contain in binary graphs (often called hops), they can be computed using edge weights in weighted graphs. We will assume that paths composed of stronger edges span shorter lengths and, therefore, that the strength of the edge between two adjacent nodes is inversely proportional to the distance between them.
</text>


<text>
++ Distance, geodesic, eccentricity, diameter, radius

- Distance: The distance <eqn>d_G(u,v)</eqn> from a vertex <eqn>u</eqn> to a vertex <eqn>v</eqn> in a connected graph <eqn>G</eqn> is the minimum length of the paths that connect <eqn>u</eqn> and <eqn>v</eqn> in <eqn>G</eqn>.
</text>


<text>
If a and b are two vertices in the same connected component of a graph G, there has to exist a path of shortest length (say d) between a and b. (Why?)
Then a and b are said to have distance d = d(a, b) ++ Junig. Chapter 3
</text>

<text>
- Geodesic: A path of length  <eqn>d_G(u,v)</eqn> from a vertex <eqn>u</eqn> to a vertex <eqn>v</eqn> in a connected graph <eqn>G</eqn> is called a geodesic.
= geodesic path, also called simply a shortest path,

++ The length of a geodesic path, often called the geodesic distance or shortest distance
</text>

<text>
L: Path length is the shortest path between two nodes, and average path length is the average over all shortest paths.
= The average path length of G is equal to the average over all direct paths. This metric is also known as the characteristic path length of G.
</text>

<text>
The eccentricity of vertex v in a graph is the shortest-path distance to the farthest vertex from v. 
= the longest path from a node u to all other nodes of a connected graph
= the largest geodesic distance
++ from 0 to n-1
a.k.a. association number in SNA
</text>

<text>
The radius of a graph is the smallest eccentricity among the vertices of G.
</text>

<text>
The diameter of a graph is the greatest eccentricity among the vertices of G.
= The longest path between any two nodes in a graph G is called the diameter of G,
= The largest geodesic in the graph <eqn>max_i max_j d(i,j)</eqn>

N: The diameter of a graph is the length of the longest geodesic path between any pair of vertices in the network for which a path actually exists (to avoid infinite values for disconnected graphs)
...
 talk about the diameters of the individual components separately, a perfectly well-defined concept whatever convention we adopt for unconnected vertices
</text>

<text>
For every unweighted, undirected, connected graph, the following lower and upper bounds can be defined for its diameter:
</text>

<equation>
radius(G) \leq diameter(G) \leq 2 radius(G)
</equation>

<text>
++  let l(s) denote the maximum, over all vertices t, of the shortest-path distance between s and t. The radius of a graph is the minimum of l(s) over all choices of the vertex s.  Let c minimize radius(s) over all vertices s. Since every pair of vertices s and t have paths to c with at most r edges, stitching these paths together yields an s-t with only 2r edges; of course, the shortest s-t path is only shorter.
</text>

<text>
L: Diameter is amaximum value, while average path length is an average value. Thus, average path length is never greater than the diameter of the entire graph. However, it can be smaller than the radius... ?
</text>

<text>
Every vertex whose eccentricity is the radius of the graph is called a central vertex, i.e. a node with minimum eccentricity. The center of the graph is the subgraph induced by the set of vertices whose eccentricity is the radius. 
</text>

<text>
Every vertex whose eccentricity is the diameter of the graph is called a peripheral vertex, i.e. a node with the largest eccentricity. The periphery of the graph is the subgraph induced by the set of vertices whose eccentricity is the diameter of the graph. 
</text>

<text>
Two vertices whose distance between them is the diameter of the graph are said to be antipodal vertices.
</text>

<text>
The girth of a graph containing cycles is the length of a shortest cycle.
</text>

<text>
An edge linking two nodes indicates that they can communicate directly, whereas longer paths are likely to have a lower effect on the network behavior.
</text>


<text>
The pairwise distance of the shortest path linking the nodes in a network is represented in its distance matrix. Its global maximum is the network diameter. The distance matrix describes the communication patterns within the network.
</text>



</document>



<!-- Independent paths and cut sets -->

<document>
<tag>graph-theory-independent-paths</tag>
<title>Independent paths and cut sets</title>

<text>
++ Nonseparable graphs: cut-vertices (nodes) and blocks/branches 
=> vertex-cuts (vertex-connectivity), bridges (edges) 
=> edge-cuts (edge-connectivity)
</text>


<!-- Independent paths -->

<text>
N: The number of independent paths between vertices gives a simple measure of how strongly the vertices are connected to one another,

there are two species of independent path: edge-independent and vertex-independent. Two paths connecting a given pair of vertices are edge-independent if they share no edges. Two paths are vertex-independent (or node-independent) if they share no vertices other than the starting and ending vertices. If two paths are vertex-independent then they are also edge-independent, but the reverse is not true: it is possible to be edge-independent but not vertex-independent. For instance, the network shown in Fig. 6.15a has two edge-independent paths from A to B, as denoted by the arrows, but only one vertex-independent path—the two edge-independent paths are not vertex-independent because they share the intermediate vertex C.
Independent paths are also sometimes called disjoint paths, primarily in the mathematical literature. One also sees the terms edge-disjoint and vertexdisjoint , describing edge and vertex independenc

+ The edge-independent paths are not necessarily unique; there are two different ways of choosing two independent paths from A to B in (a two diamond graph).
</text>


<!-- Cut nodes -->

<text>
A cut vertex, cut node, cut point, or articulation point of a graph G is a vertex v such that G \ v
has more connected components than G, i.e. <eqn>k(G\v) &gt; k(G)</eqn>, where <eqn>k(G)</eqn> indicates the number of connected components of <eqn>G</eqn>.
</text>

<text>
The following properties can be proved for cut points:
</text>

<list>

<item>
Every nontrivial connected graph contains at least two nodes that are not cut-nodes (which correspond to the extremes of the longest path within the graph).
</item>

<item>
A vertex <eqn>v</eqn> is a cut-node if and only if there are two vertices <eqn>u</eqn> and <eqn>w</eqn> distinct from <eqn>v</eqn> such that <eqn>v</eqn> lies in every path between them.
</item>

</list>


<!-- Bridges -->

<text>
The removal of cut points results in a disconnected graph. There are also edges that have this property:
An edge e of a connected graph G is called a bridge if G \ e is not connected. In particular, when e is a bridge, <eqn>k(G\v) = k(G) + 1</eqn>.
</text>

<text>
An edge is a bridge of G if and only if it lies on no cycle in G.
</text>


<figure>
  <tag>fig-connectivity</tag>
  <image scale="25" file="image/graphs/bowtie"/>
  <title>The bowtie graph.</title>
</figure>

<text>
For example, let us consider the bowtie graph in Figure <ref>fig-connectivity</ref>. In this graph, both <eqn>c</eqn> and <eqn>d</eqn> are cut points (a.k.a articulation points), whereas only the <eqn>cd</eqn> edge is a bridge.
</text>

<text>
J: Which connected multigraphs can be oriented in such a way that the resulting graph is strongly connected? Such multigraphs
are called orientable. Thus we ask which connected systems of streets can be
made into a system of one-way streets such that people can still move from
each point to every other point. The answer is given by the following theorem
[Rob39].
Theorem 1.6.2 (Robbins' theorem). A connected multigraph is orientable
if and only if it does not contain any bridge.

+ G does not contain a bridge if and only if each edge of G is contained in at least one cycle.
</text>


<!-- Separable graphs -->


<text>
A connected graph containing no cut-nodes is a nonseparable graph, whereas a connected graph containing cut points is said to be separable.
</text>

<text>
It can be proved that, in any nonseparable graph with 3 nodes or more, every two vertices lie on a common cycle. Therefore, there are two internally disjoint paths between every two distinct nodes in nonseparable graphs, where internally disjoint means that they have only their end vertices in common (a.k.a. vertex-disjoint paths ). 
</text>

<!-- Blocks -->

<text>
The maximal induced subgraphs of a graph G which are not separable are called the blocks or biconnected components of G.
</text>

<text>
Every two distinct blocks of a given connected graph have at most one vertex in common. When they have one, this vertex is a cut point.
</text>

<text>
It can also be proved that the center of every connected graph lies in a single block of the graph.
</text>

<text>
J: Let G be a graph and s and t two vertices of G. Then a set of paths in G with start vertex s and end vertex t is called edge disjoint if no two of these paths share an edge, and vertex disjoint if no two of the paths have a vertex other than s and t in common.
</text>



<!-- Separators -->

<document>
<tag>graph-theory-separators</tag>
<title>Vertex separators and edge separators</title>


<text>
N: Connectivity can also be visualized in terms of “bottlenecks” between vertices. Vertices A and B in (two-diamond graph, for instance, are connected by only one vertex-independent path because vertex C forms a bottleneck through which only one path can go. This idea of bottlenecks is formalized by the notion of cut sets as follows. Consider an undirected network. (In fact the developments here apply equally to directed ones, but for simplicity let us stick with the undirected case for now.) A cut set, or more properly a vertex cut set, is a set of vertices whose removal will disconnect a specified pair of vertices. For example, the central vertex C in Fig. 6.15 forms a cut set of size 1 for the vertices A and B. If it is removed, there will be no path from A to B. There are also other cut sets for A and B in this network, although all the others are larger than size 1.
An edge cut set is the equivalent construct for edges—it is a set of edges whose removal will disconnect a specified pair of vertices.
A minimum cut set is the smallest cut set that will disconnect a specified pair of vertices. In Fig. 6.15 the single vertex C is a minimum vertex cut set for vertices A and B. A minimum cut set need not be unique. 
</text>


<text>
A subset A of E is called an edge separator for s and t if each path from s to t contains some edge from A. 

Similarly, a subset X of V \ {s, t} is called a vertex separator for s and t if each path from s to t meets X in some vertex.
</text>


<text>
J: The existence of disjoint paths plays an important role for questions of network
reliability: if there are k vertex disjoint paths from s to t, the connection
between s and t can still be maintained even if k-1 vertices fail, and similarly
for edges.

J: measuring the strength of connectivity of a connected
graph by the number of vertex disjoint paths (or edge disjoint paths) between
any two given vertices
</text>


</document>


<!-- k-connectivity: k-connected &amp; k-edge-connected graphs -->

<document>
<tag>graph-theory-k-connectivity</tag>
<title>Vertex connectivity and edge connectivity</title>


<text>
N: There can be only a finite number of independent paths between any two vertices in a finite network. Each path must contain at least one edge and no two paths can share an edge, so the number of independent paths cannot exceed the number of edges in the network.

The number of independent paths between a pair of vertices is called the connectivity of the vertices.68 If we wish to be explicit about whether we are considering edge- or vertex-independence, we refer to edge or vertex connectivity . The vertices A and B in (two diamond graph) have edge connectivity 2 but vertex connectivity 1 (since there is only one vertex-independent path between them).
</text>


<!-- Vertex connectivity -->

<text>
A vertex-cut of a connected graph G is a subset S of the vertices V(G) such that G\S is disconnected. 
++ a.k.a. cut set

A vertex-cut of minimum cardinality is called a minimum vertex-cut and this cardinality is known as the vertex connectivity of the graph, denoted by \kappa(G).
</text>

<text>
\kappa(G): the connectivity of a graph

min {|T| : T \subset V and G \ T is not connected} .

G is called k-connected if \kappa(G) \geq k.
</text>

<text>
for any two vertices s and t of a graph G, we denote by \kappa(s, t) the maximal
number of vertex disjoint paths from s to t in G. 


A graph G is k-connected if and only if \kappa(s, t) \geq k for any two vertices s and t of G.
</text>


<text>
A k-connected graph on n vertices contains at least <eqn>\lceil kn/2 \rceil</eqn> edges.
</text>

<text>
A connected graph with at least three vertices either contains a cut point or is 2-connected.
</text>

<text>
The maximal induced subgraphs of a graph G which are k-connected are called the k-connected components of G. The idea of k-connected components generalizes the previous concept of block or biconnected component, where <eqn>k=2</eqn>.
</text>

<!-- Edge connectivity -->

<text>
Analogously, an edge-cut of a connected graph G is a subset X of the edges E(G) such that G\X is disconnected.
++ a.k.a. line-cut

An edge-cut of minimum cardinality is called a minimum edge-cut and this cardinality is known as the edge connectivity of the graph, denoted by \lambda(G).
</text>

<text>
\lambda(u, v) = the minimal cardinality of an edge separator for u and v.
</text>

<text>
The edge connectivity \lambda(G) is defined as lambda(G) = min{ \lambda(u, v) : u, v \in V }.

G is called m-fold edge connected if \lambda(G) \geq m
</text>

<text>
The following equation defines the relationship among (vertex) connectivity, edge connectivity, and maximum degree for any connected graph:
</text>

<equation>
\kappa(G) \leq \lambda(G) \leq \delta(G)
</equation>

<text>
PROOF: 

- Removing all edges incident with v obviously yields a disconnected graph, so that \lambda(G) \leq \delta(G).

- If \lambda(G) = 1, G contains a bridge e = uv. Then G cannot be 2-connected, because removing u from G
yields either a K1 or a disconnected graph. If \lambda(G) = k \geq 2, removing k - 1
edges e2, . . . , ek of an edge separator from G results in a graph H containing a
bridge e1 = uv. Therefore, if we remove from G one of the end vertices of each
of the ei distinct from u and v (for i = 2, . . . , k), we get either a disconnected
graph or a graph where e1 is a bridge (so that removing u makes the graph
disconnected). In either case, \kappa(G) \leq k = \lambda(G).
</text>



<!-- Connectivity theorems -->

<text>
By definition, a graph is connected if every two vertices are connected by at least one path. This fact can be generalized by Menger's and Whitney's theorems:
</text>

<list>

<item>Menger’s theorem (1927), edge version: Let G be a graph or digraph, and let s and t be two vertices of G. Then the maximal number of edge disjoint paths from s to t is equal to the minimum cardinality of an edge separator for s and t.</item>

<item>Menger’s theorem (1927), vertex version: Let G be a graph or digraph, and let s and t be any two non-adjacent vertices of G. Then the maximal number of vertex disjoint paths from s to t is equal to the minimum cardinality of a vertex separator for s and t.</item>

</list>

<text>
By Menger's theorem, \kappa(s, t) equals the minimal cardinality of a vertex separator for s and t whenever s and t are non-adjacent.
</text>

<text>
With the aid of Menger's theorem, k-connected graphs can also be characterized as follows:
</text>

<list>

<item>Whitney's theorem (1932), vertex version: A graph G is k-connected if and only if any two vertices of G are connected by at least k vertex disjoint paths.</item>

<item>Whitney's theorem (1932), edge version: A graph G is k-edge-connected if and only if any two vertices of G are connected by at least k edge disjoint paths.</item>

</list>

<text>
This formal result completes our study of graph connectivity, by completing Menger's theorem, which was only applicable to non-adjacent vertices s and t.
</text>

<text>
In layman's terms, Whitney's theorem states that there are n independent paths between a given pair of vertices if the size of the minimum cut set between them is n. The edge version of the Menger's theorem is specially relevant for network flow problems, where we try to maximize the amount of fluid that flows through a network: the maximum flow is equal to the number of edge-independent paths times the edge capacity. This result can be generalized for weighted graphs and it is known as the maximum-flow/minimun-cut theorem: the maximum flow between a given pair of vertices in a network is equal to the sum of the weights on the edges of the minimum edge cut set that separates both vertices, being the minimum edge cut set that with minimum sum of the weights of the edges in the set. As a matter of fact, maximum flow algorithms provide the standard numerical solution for connectivities and cut sets.
</text>

</document>

</document>

</document>


