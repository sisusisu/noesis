<?xml version="1.0"  encoding="ISO-8859-1" ?> 
<?xml-stylesheet type="text/xsl" href="../book.xsl"?>


<document>
<tag>introduction-tools</tag>
<title>Software tools for network analysis</title>


<document>
<tag>introduction-tools-packages</tag>
<title>Software packages for network analysis</title>


También hay que mencionar existen productos software específicamente diseñados para analizar redes
sociales. Estos productos utilizan grafos con atributos en vez de tablas como modelo subyacente de
representación de los datos. Algunos ejemplos representativos de sistemas de este tipo son:





<list>

<item>
Pajek <cite>de Nooy et al. 2005</cite>
- Pajek (de la Universidad de Ljubljana en Eslovenia, http://vlado.fmf.uni-lj.si/pub/networks/pajek/).
</item>

<item>
UCINET, by Lin Freeman, Steve Borgatti, and Martin Everett.
http://www.analytictech.com/ucinet

- UCINET (proyecto de Lin Freeman, Steve Borgatti y Martin Everett, de la Universidad de California en
Irvine, EE.UU., y ahora comercializado por una empresa llamada
AnalyticTech, http://www.analytictech.com/ucinet/).
</item>

<item>
NodeXL <cite>Hansen et al. 2010</cite>
</item>

<item>
SNAP (Stanford Network Analysis Package), by Jure Leskovec

SNAP (Stanford Network Analysis Package, http://snap.stanford.edu/), paquete creado por Jure
Leskovec y utilizado internamente por herramientas como NodeXL, patrocinada por Microsoft
Research (http://nodexl.codeplex.com/)

</item>

<item>
Network Workbench (Indiana), by Katy Börner

NWB (Network Workbench: A Large-Scale Network Analysis, Modeling and Visualization Toolkit for Biomedical, Social Science and Physics Research, de la Universidad de Indiana, EE.UU.,
http://nwb.slis.indiana.edu).
</item>



<item>
GRADAP, by Karel Sprenger and Frans Stokman

- GRADAP (GRaph Definition and Analysis Package, resultado de un proyecto coordinado de varias universidades holandesas coordinado por Karel Sprenger y Frans Stokman).
</item>

<item>
Brain Connectivity Toolbox, <url>http://www.brain-connectivity-toolbox.net</url>. Matlab library containing a large selection of complex network measures. BCT is maintained by Olaf Sporns and Mikail Rubinov.

BCT (Brain Connectivity Toolbox, http://www.brain-connectivity-toolbox.net), biblioteca para Matlab
mantenida por Olaf Sporns (Universidad de Indiana, EE.UU.) y Mikail Rubinov (Universidad de
Cambridge, UK).
</item>

<item>
ROLE, by Ron Breiger (Universidad de Arizona)

</item>

<item>
SNAPS, by Noah Friedkin (Universidad de California en Santa Barbara)
</item>

<item>
STRUCTURE, by Ron Burt (Booth School of Business, University of Chicago)
</item>


<item>
NEGOPY
</item>

</list>


+ No obstante, estos sistemas no ofrecen técnicas (rudimentarias) de análisis y visualización de datos. 

</document>




<document>
<tag>introduction-tools-graph-algorithms</tag>
<title>Graph algorithm libraries</title>


STANDARD LIBRARIES:

Using a single-computer graph algorithm library, such
as BGL <cite>Siek et al. 2002</cite>, LEDA, NetworkX <cite>Hagberg et al. 2008</cite>, JDSL <cite>Goodrich and Tamassia 2010</cite>, Stanford GraphBase <cite>Knuth 1994</cite>, or FGL <cite>Erwig 2001</cite>, limiting the scale of problems that can be addressed.

<list>

<item>
  BGL
  http://www.boost.org/libs/graph/
  <cite>Siek et al. 2002</cite>
</item>

<item>
MatlabBGL, by David Gleich (then at Stanford, now at Purdue)

http://www.cs.purdue.edu/homes/dgleich/packages/matlab_bgl/
http://www.mathworks.com/matlabcentral/fileexchange/10922-matlabbgl

gaimc : Graph Algorithms In Matlab Code
Efficient pure-Matlab implementations of graph algorithms to complement MatlabBGL's mex functions

http://www.mathworks.com/matlabcentral/fileexchange/24134
</item>

<item>
  LEDA
  http://www.algorithmic-solutions.com/leda/
  <cite>Mehlhorn and Naher 1999</cite>
</item>


<item>
NetworkX, in Python, http://networkx.lanl.gov/ <cite>Hagberg et al. 2008</cite>
</item>

<item>
igraph, written in C, but accessible from Python or Ruby, and also from the free R statistical package, http://igraph.sourceforge.net/
</item>

<item>
  JDSL = the Library of Data Structures in Java (Center for Geometric Computing at Brown University + Johns Hopkins University)
  http://www.cs.brown.edu/cgc/jdsl-1.0/
  <cite>Goodrich and Tamassia 2010</cite>
</item>

<item>
  FGL <cite>Erwig 2001</cite>
</item>

<item>
  The Stanford Graphbase
  <cite>Knuth 1994</cite>
</item>

</list>


Using an existing parallel graph system. The Parallel BGL and CGMgraph libraries address parallel graph algorithms, but do not address specific issues that are important for very large scale distributed systems.

<list>

<item>
  Parallel BGL = The Parallel Boost Graph Library
  http://osl.iu.edu/research/pbgl/
  <cite>Gregor and Lumsdaine 2005</cite>
</item>

<item>
  CGMgraph
  http://people.scs.carleton.ca/~dehne/projects/Cgmlib/
  <cite>Chan and Dehne 2005</cite>
</item>

</list>

</document>




<document>
<tag>introduction-tools-database</tag>
<title>Graph databases</title>


Graph databases
http://www.graph-database.org/
http://en.wikipedia.org/wiki/Graph_database

- GBASE, a scalable and general graph management system

Authors:	
U. Kang	Carnegie Mellon University, Pittsburgh, PA, USA
Hanghang Tong	IBM T.J. Watson, Hawthorne, NY, USA
Jimeng Sun	IBM T.J. Watson, Hawthorne, NY, USA
Ching-Yung Lin	IBM T.J. Watson, Hawthorne, NY, USA
Christos Faloutsos	Carnegie Mellon University, Pittsburgh, PA, USA

Published in: 
KDD '11 Proceedings of the 17th ACM SIGKDD international conference on Knowledge discovery and data mining
ACM New York, NY, USA ©2011 
ISBN: 978-1-4503-0813-7 
doi 10.1145/2020408.2020580

Abstract: Graphs appear in numerous applications including cyber-security, the Internet, social networks, protein networks, recommendation systems, and many more. Graphs with millions or even billions of nodes and edges are common-place. How to store such large graphs efficiently? What are the core operations/queries on those graph? How to answer the graph queries quickly? We propose GBASE, a scalable and general graph management and mining system. The key novelties lie in 1) our storage and compression scheme for a parallel setting and 2) the carefully chosen graph operations and their efficient implementation. We designed and implemented an instance of GBASE using MapReduce/Hadoop. GBASE provides a parallel indexing mechanism for graph mining operations that both saves storage space, as well as accelerates queries. We ran numerous experiments on real graphs, spanning billions of nodes and edges, and we show that our proposed GBASE is indeed fast, scalable and nimble, with significant savings in space and time.


- FlockDB (Twitter) <url>http://en.wikipedia.org/wiki/FlockDB</url>, an open source distributed, fault-tolerant graph database based on MySQL and the Gizzard framework ( http://en.wikipedia.org/wiki/Gizzard_(Scala_framework) ) for managing Twitter-like graph data (single-hop relationships) at webscale FlockDB on GitHub.
https://github.com/twitter/flockdb

http://gigaom.com/2010/04/12/twitter-open-sources-the-home-of-its-social-graph/
Twitter today open-sourced the code that it used to build its database of users and manage their relationships to one another, called FlockDB. The move comes shortly after Twitter released its Gizzard framework, which it uses to query the FlockDB distributed data store up to 10,000 times a second without creating a logja


MARKET

- GraphBase - a customizable, distributed, small-footprint, high-performance graph store with a rich tool set from FactNexus
http://graphbase.net/

Neo4j is a disk-based transactional graph database. 
-  dual license model: open-source / commercial (GPLv3 community edition, AGPLv3 advanced and enterprise edition) graph database
http://neo4j.org/
http://en.wikipedia.org/wiki/Neo4j

HyperGraphDB is based on key/value pair store Berkeley DB. 
- open-source (LGPL) graph database supporting generalized hypergraphs where edges can point to other edges
http://www.hypergraphdb.org/

InfiniteGraph is a distributed system for large graph data analysis.
- a highly scalable, distributed and cloud-enabled commercial product with flexible licensing for startups.
http://www.infinitegraph.com/

Trinity, C#
http://research.microsoft.com/en-us/projects/trinity/
Trinity is a graph database and graph computation platform over distributed memory cloud. At the heart of Trinity is a distributed RAM-based key-value store. As an all-in-memory key-value store, Trinity provides fast random data access. This feature naturally makes Trinity suitable for large graph processing. Trinity is a graph database from the perspective of data management. It is a parallel graph computation platform from the perspective of graph analytics. As a database, it provides features such as data indexing, concurrent query processing, concurrency control. As a computation platform, it provides vertex-based parallel graph computation on large scale graphs.
- Memory based distributed key-value store: Provides fast random data access.
- Graph database.
- Graph computation platform. 
- Flexible data model: A wide range of graph models are supported by Trinity, such as simple graph, weighted simple graph, hypergraph and extended hypergraph.
- High Performance: suitable for low-latency, high-throughput graph applications.

OrientDB - a high-performance open source document-graph database
http://www.orientdb.org/
http://en.wikipedia.org/wiki/OrientDB

DEX - A high-performance graph database from Sparsity Technologies, a technology transition company from DAMA-UPC ( (Data Management group at the Polytechnic University of Catalonia). http://en.wikipedia.org/wiki/DEX_(Graph_database)
http://sparsity-technologies.com/dex

InfoGrid - an open-source / commercial (AGPLv3, free for small entities) graph database with web front end and configurable storage engines (MySQL, PostgreSQL, Files, Hadoop)
http://infogrid.org/trac/

sones GraphDB - an open-source / commercial (AGPLv3) graph database and universal access layer (funded by Deutsche Telekom AG)
http://en.wikipedia.org/wiki/Sones_GraphDB
http://www.sones.de/static-en/




Feature matrix, adapted and extended from http://www.graph-database.org/implementations/


Neo4j
Graph model	Property-Graph
Schema	Schemaless, but schema via external API
Query-Methods	Traverser API, Blueprints, Rexster, Gremlin, SPARQL
Goals	Embedded graph database
Written in	Java
APIs	Java, JPython, JRuby
Protocols	REST+JSON
Persistency	Own on disc format
Transactions	ACID
Distribution	MySQL style master/slave replication
License	AGPLv3 Open Source license, commercial license

OrientDB
Graph model	Property-Graph; may have vertex and edge schemata
Schema	Schemaless and vertex/edge schema
Query-Methods	Traverser API, Blueprints, Rexster, Gremlin, Own SQL-like Query Language
Goals	Integrated NoSQL-solution providing a key/value-store, document-database and a graph-database.
Written in	Java 6
APIs	Java
Protocols	REST+JSON
Persistency	Own on disc format
Transactions	ACID, MVCC
Distribution	?
License	Apache 2.0

DEX
Written in	Java, C++ core
Graph-Model	Labeled and directed attributed multigraph
Goals	High performance
Query-Methods	Traverser API, Graph API, Blueprints, Rexster, Gremlin
APIs	Java
Protocols	not applicable, Java API
Persistency	disk
Transactions	patial ACID support (consistency and isolation)
Distribution	-
License	Academic/Personal/Community licence  Restricted to 1 milion nodes and 1 temporary graph.

InfoGrid
Written in	Java
Graph-Model	dynamically typed, object-oriented graph. Supports directed and undirected edges, multigraphs, semantic models.
Goals	REST-ful web applications
Query-Methods	Web user interface with html, RSS, Atom, JSON output, Java native.
APIs	Java
Protocols	XPRISO, HTTP, REST, OpenID, RSS, Atom, JSON
Persistency	-
Transactions	-
Distribution	peer-to-peer replication
License	Open Source AGPLv3 or commercial (free for small organizations)

HyperGraphDB
Written in	Java
Graph-Model	Object-oriented multi-relational labeled hypergraph.
Goals	AI and the semantic web
Query-Methods	Property lookup, Traverser API
APIs	Java
Protocols	-
Persistency	-
Transactions	-
Distribution	-
License	LGPL

Infinitegraph
Written in	Java, Core C++
Graph-Model	Labelled directed multigraph
Goals	Building a fully-distributed and high performance graph-database.
Query-Methods	Traverser API
APIs	Java(, C# announced)
Protocols	-
Persistency	via Objectivity/DB
Transactions	via Objectivity/DB
Distribution	via Objectivity/DB
License	Closed Source, commercial (free under certain conditions)

sones
Graph model	Object-oriented Property-Graph with a simple Node-Ontology
Schema	Schemaless and vertex/edge schema
Query-Methods	Own Graph Query Language (GQL), Traverser API
Goals	Efficient handling of semi-structured (binary) graph data
Written in	C#
APIs	.NET
Protocols	REST+JSON/XML/HTML/GEXF, WebDAV
Persistency	Own on disc format, AmazonS3/AzurePageBlobs
Transactions	
Distribution	CouchDB-like P2P-Replication
License	AGPLv3 Open Source license, commercial and SaaS/DaaS-license



Neo4j

? Neo4j is an embedded, disk-based, fully transactional Java persistence engine that stores data structured in graphs rather than in tables.

DEX

? DEX is a high performance library to manage very large graphs or networks

HyperGraphDB

? HyperGraphDB: a general purpose, extensible, portable, distributed, embeddable, open-source data storage mechanism.

InfoGrid

? InfoGrid: an Internet Graph Database with a many additional software components that make the development of REST-ful web applications on a graph foundation easy.

vertexdb

? vertexdb: a high performance graph database server that supports automatic garbage collection.

Note: by checking the project homepage I cannot tell if the project is still active or not.

AllegroGraph

? AllegroGraph RDFStore: a modern, high-performance, persistent RDF graph database.

Note: AllegroGraph seems to be positioned in the RDF stores space, which features some other solutions too.

Filament

? Filament: a graph persistence framework and associated toolkits based on a navigational query style.

Sones

? Sones GraphDS provides an inherent support for high-level data abstraction concepts (graph structures, walks, consistency, editions, revisions, copies), its own Graph Query Language, an underlying distributed file system and various interfaces like SOAP, REST or WebDAV.


</document>



<document>
<tag>introduction-tools-distribued</tag>
<title>Distributed graph processing</title>


SIGMOD 2012 Mining Large Graphs tutorials...

<cite>Faloutsus and Kang 2012</cite>

<cite>Shao et al. 2012</cite>



Distributed Graph Processing (mostly in memory)


MAPREDUCE <cite>Dean and Ghemawat 2004</cite>

Graph Twiddling in MapReduce <cite>Cohen 2009</cite>
Design Patterns <cite>Lin and Schatz 2010</cite>

+ CACM'2008
+ CACM'2010


Pegasus (CMU) @ ICDM 2009, KAIS 2010
@ ICDM 2009 <cite>Kang et al. 2009</cite>
@ KAIS 2011 <cite>Kang et al. 2011</cite>, special issue: Best Papers of the Fifth International Conference on Advanced Data Mining and Applications (ADMA 2009)
http://www.cs.cmu.edu/~pegasus/


Titan - A distributed, disk-based graph computing engine developed by Aurelius, 
- connectivity to both Cassandra(http://cassandra.apache.org/) and HBase (http://hbase.apache.org/) NoSQL databases.
- implements the Blueprints graph API (https://github.com/tinkerpop/blueprints/wiki/), analogous to the JDBC, but for graph databases
http://thinkaurelius.github.com/titan/



- Vertex-centric model
i.e. BSP Computational model http://en.wikipedia.org/wiki/Bulk_synchronous_parallel
i.e. makes calculating data for each vertex and edge in parallel possible on a cluster of nodes

 BSP (Bulk Synchronous Processing) model. In this model, there are multiple processing units proceeding in parallel in a sequence of supersteps. Within each superstep, each processing units first receive all messages delivered to them from the preceding superstep, and then manipulate their local data and may queue up the message that it intends to send to other processing units. This happens asynchronously and simultaneously among all processing units. The queued up message will be delivered to the destined processing units but wont be seen until the next superstep. When all the processing unit finishes the message delivery (hence the synchronization point), the next superstep can be started, and the cycle repeats until the termination condition has been reached.


PREGEL
While it sounds similar to mapreduce, Pregel is optimized for graph operations, by reducing I/O, ensuring data locality, but also preserving processing state between phases.
http://nosql.mypopescu.com/post/841789848/comparing-pregel-and-mapreduce

  Since Pregel model retain worker state (the same worker is responsible for the same set of nodes) across iteration, the graph can be loaded in memory once and reuse across iterations. This will reduce I/O overhead as there is no need to read and write to disk at each iteration. For fault resilience, there will be a periodic check point where every worker write their in-memory state to disk.

  SIGMOD'2010 paper <cite>Malewicz et al. 2010</cite>: we present a computational model suitable for this task. Programs are expressed as a sequence of iterations, in each of which a vertex can receive messages sent in the previous iteration, send messages to other vertices, and modify its own state and that of its outgoing edges or mutate graph topology. This vertex-centric approach is flexible enough to express a broad set of algorithms. The model has been designed for efficient, scalable and fault-tolerant implementation on clusters of thousands of commodity computers, and its implied synchronicity makes reasoning about programs easier. Distribution-related details are hidden behind an abstract API. The result is a framework for processing large graphs that is expressive and easy to program.

Also, Pregel (with its stateful characteristic), only send local computed result (but not the graph structure) over the network, which implies the minimal bandwidth consumption.
Pregel (Google) @ SIGMOD 2010
http://googleresearch.blogspot.com.es/2009/06/large-scale-graph-computing-at-google.html
http://horicky.blogspot.com.es/2010/07/google-pregel-graph-processing.html
http://www.rene-pickhardt.de/some-thoughts-on-google-mapeduce-and-google-pregel-after-our-discussions-in-the-reading-club/
http://blog.acaro.org/entry/google-pregel-the-rise-of-the-clones
- Pregel - Google's internal graph processing platform, released details in ACM paper.
http://googleresearch.blogspot.com/2009/06/large-scale-graph-computing-at-google.html
http://dl.acm.org/citation.cfm?id=1582723
- GoldenOrb - Pregel implementation built on top of Apache Hadoop, http://www.goldenorbos.org/, sponsored by Ravel, an Austin-based company dedicated to making enterprise grade analytics solutions
- Phoebus - Pregel implementation written in Erlang, https://github.com/xslogic/phoebus, Developed by Arun Suresh (Yahoo!)
- JPregel - In-memory java based Pregel implementation, http://kowshik.github.com/JPregel/
- sedge, open source version of Google's Pregel, a framework for distributed large graph processing and graph partition management (including an )
http://grafia.cs.ucsb.edu/sedge/


- Apache Hama - a Graph processing framework that runs on top of Apache Hadoop. = a pure BSP (Bulk Synchronous Parallel) computing framework on top of HDFS (Hadoop Distributed File System) for massive scientific computations such as matrix, graph and network algorithms.
http://hama.apache.org/
- Angrapa - graph package in Hama, a bulk synchronous parallel (BSP) platform
http://people.apache.org/~edwardyoon/site/hama_graph_tutorial.html


- Giraph - a Graph processing infrastructure that runs on Hadoop (Yahoo!).
http://incubator.apache.org/giraph/

- HipG (VU University Amsterdam) <cite>Krepska et al. 2011a</cite> <cite>Krepska et al. 2011b</cite> <cite>Krepska et al. 2011c</cite>
http://www.cs.vu.nl/~ekr/hipg/


- Trinity - Distributed in-memory graph engine under development at Microsoft Research Labs.
http://research.microsoft.com/en-us/projects/trinity/


- KDT - An open-source distributed graph library with a Python front-end and C++/MPI backend (Combinatorial BLAS).
http://kdt.sourceforge.net/



	
GraphLab (CMU) @ VLDB 2012 <cite>Low at al. 2012</cite>
http://graphlab.org/
	
GraphChi (CMU): GraphChi[huahua] is a spin-off of the GraphLab[rador's retriever] project
+ run very large graph computations on just a single machine, by using a novel algorithm for processing the graph from disk (SSD or hard drive). Programs for GraphChi are written in similar vertex-centric model as  GraphLab. GraphChi runs vertex-centric programs asynchronously (i.e changes written to edges are immediately visible to subsequent computation), and in parallel. GraphChi also supports streaming graph updates and changing the graph structure while computing.
http://code.google.com/p/graphchi/
http://www.technologyreview.com/news/428497/your-laptop-can-now-analyze-big-data/?nlid=nlcomm&amp;nld=2012-07-23


Signal/Collect framework (University of Zurich) <cite>Stutz et al. 2010</cite>
http://code.google.com/p/signal-collect/
http://www.rene-pickhardt.de/google-pregel-vs-signal-collect-for-distributed-graph-processing-pros-and-cons/
- Signal-collect model
http://www.rene-pickhardt.de/google-pregel-vs-signal-collect-for-distributed-graph-processing-pros-and-cons/




+ http://www.graph500.org/

</document>

</document>
