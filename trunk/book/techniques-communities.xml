<?xml version="1.0"  encoding="ISO-8859-1" ?> 
<!DOCTYPE sys-ents [ <!ENTITY bibliography SYSTEM "bibliography.xml"> ]> 
<?xml-stylesheet type="text/xsl" href="../book.xsl"?>


<document>
&bibliography;
<title>Community Detection</title>

<text>
Specific aspects of the general idea of social group have led to more precise network definitions: cliques and their generalizations in graph theoretic terms, interacting communities, social circles, and structures of affiliation.
</text>

<text>
++ Identification of various kinds of subgraphs, i.e. communities (the coarse structure of the network)

Ideally, natural groups of heavily-connected nodes within a network


</text>

<text>
Applications: Web communities representing groups with a common interest, communities of named entities in text documents (e.g. people and organizations), social phenomena in e-mail communications, friendships in social networks...
</text>

<text>
1) people literally choose to people like them (sorting, what sociologists call homophily)
2) we also change our behavior to match that of people around us (peer effects)
both mechanisms create groups of people who look similar to one another

e.g. 
- Thomas Schelling's tipping model (racial segregation),
- Mark Granovetter (people's willingness to participate in some sort of collective behavior: riots, political uprisings,social movement...)
- John Miller and Scott Page's standing ovation model (a model of peer effects where you change your behavior to match that of others around you)
</text>


<text>
EXAMPLE: karate club social network

K: Social networks can also capture the sources of conflict within a group...
2 central [nodes] in the network of friendships, with many connections to other people. On the other hand, they are not
friends with each other, and in fact most people are only friends with one or the other
of them. These two central people were, respectively, the instructor and the student
founder of the club, and this pattern of noninteracting clusters was the most visible
symptom of a conflict between them and their factions that ultimately splintered the
group into two rival karate clubs... the theory of structural balance can be used to reason about how fissures in a network may
arise from the dynamics of conflict and antagonism at a purely local level.
</text>

<text>
GRAPH PARTITIONING, from <cite>Skiena 2008</cite>:

APPLICATIONS:

- Clustering: Graph partition also arises when we need to cluster the vertices into logical components. If edges link “similar” pairs of objects, the clusters remaining after partition should reflect coherent groupings.

- Divide and conquer arises in many divide-and-conquer algorithms, which gain their efficiency by breaking problems into equal-sized pieces such that the respective solutions can easily be reassembled. Minimizing the number of edges cut in the partition usually simplifies the task of merging

- Parallel algorithms. Consider the finite element method, which is used to compute the physical properties (such
as stress and heat transfer) of  geometric models. Parallelizing such calculations requires partitioning the models into equal-sized pieces whose interface is small. This is a graph-partitioning problem, since the topology of a geometric model is
usually represented using a graph.

- Data locality: Large graphs are often partitioned into reasonable-sized pieces to improve data locality 

- Drawing: or make less cluttered drawings.
</text>



<document>
<tag>community-detection-partitioning</tag>
<title>Graph partitioning</title>


<text>
Non-overlapping communities...
</text>

<text>
GRAPH PARTITIONING HEURISTICS

- Local improvement heuristics for graph partitioning (.e.g sweep through the vertices, deciding
whether the size of the cut would improve if we moved this vertex over to the other
side) are due to Kernighan-Lin [KL70] and Fiduccia-Mattheyses [FM82].

- Spectral partitioning methods use sophisticated linear algebra techniques to
obtain a good partitioning. The spectral bisection method uses the second-lowest
eigenvector of the Laplacian matrix of the graph to partition it into two pieces. 
Spectral methods for graph partition are discussed in [Chu97, PSL90]. 

When more than two components are desired, the partitioning heuristic should
be applied recursively.

Empirical results on graph partitioning heuristics include [BG95, LR93].
</text>

<document>
<tag>community-detection-kernighan-lin</tag>
<title>The Kernighan-Lin algorithm</title>
</document>

<document>
<tag>community-detection-spectral</tag>
<title>Spectral partitioning</title>


<text>
Random walk process: move from a node to any of its d neighbors with equal probability p=1/d. A random walk will spend more time in areas with high density of links, indicating the existence of communities
</text>

<text>
Instead of tracing random walks, researchers resort to a mathematical operator that generates such random walks. This is more covenient in practice and more elegant in theory...  <cite>Newman 2006</cite>
</text>


<text>
Let us suppose that a network is divided into <eqn>c</eqn> different components. Then, if we order the vertices so that the first <eqn>n_1</eqn> correspond to the first component, the next <eqn>n_2</eqn> to the second component, and so on, the network Laplacian will be block diagonal. In fact, each block in the Laplacian will be the Laplacian of the corresponding component.
</text>

<text>
Taking into account the definition of the Laplacian
</text>

<equation>
l_{ij} = \delta_{ij}d_{i} - a_{ij}
</equation>

<text>
when we multiply the vector <eqn>\vec{1}</eqn>, made of ones, by the Laplacian, the ith element of the result will be
</text>

<equation>
\sum_j l_{ij} \times 1 = \sum_j ( \delta_{ij}d_{i} - a_{ij} ) = d_{i} - \sum_j a_{ij} = d_{i} - d{i} = 0
</equation>

<text>
That is, the vector <eqn>\vec{1}</eqn> is an eigenvector of the Laplacian with eigenvalue 0.
</text>

<text>
If we return to our disconnected network, we can easily obtain <eqn>c</eqn> eigenvectors with eigenvalue zero: the vectors with ones in the positions corresponding to vertices in a single component and zeros elsewhere. Actually, the number of zero eigenvalues is always exactly equal to the number of connected components. As a corollary, we can assert that the network is connected if and only if the second eigenvalue of the network Laplacian <eqn>\lambda_2</eqn> is non-zero. The second eigenvalue of the network Laplacian is called the algebraic connectivity of the network and it is also known as its spectral gap.
</text>

</document>

</document>



<document>
<tag>community-detection-modularity</tag>
<title>Modularity maximization methods</title>

<document>
<tag>community-detection-modularity-simple</tag>
<title>Simple modularity maximization</title>
</document>

<document>
<tag>community-detection-modularity-spectral</tag>
<title>Spectral modularity maximization</title>
</document>

</document>



<document>
<tag>community-detection-betweenness</tag>
<title>Betweenness-based methods</title>

</document>



<document>
<tag>community-detection-hierarchical</tag>
<title>Hierarchical clustering</title>

++ Nested structure of communities (hierarchically embedded communities) vs. non-overlapping communities

++ dendrogram...
ideally, the dendrogram 
- represents the most natural partition of a given network for every possible number of communities
- reflects the global organization of the network


<document>
<tag>community-detection-newman-girvan</tag>
<title>The Newman-Girvan algorithm</title>


Newman-Girvan algorithm <cite>Newman and Girvan 2004</cite>:
Uncover communities by removing the links that carry the highest numbers of shortest paths (using the link betweenness centrality)

1) Compute the betweenness centrality for all the links in the network

Repeat until no links remain:

2) Remove the link with the highest betweenness

3) Recompute betweenness centrality for the remaining links


NOTE: Recomputing betweenness in necessary (e.g. communities connected by two links, one with high initial betweenness, the other with low betweenness in the original network; after the first link removal, the second link betweenness will soar [and the link will be removed soon, hence uncovering the original communities]).

Reasonable results, albeit the algorithm might fail (e.g. three equal cliques connected by three links)

+ Once the dendrogram is built, the modularity measure Q can be used to determine the best possible partition (i.e. the number of partitions).

</document>


</document>




<document>
<tag>community-detection-overlapping</tag>
<title>Overlapping communities</title>


<text>
A single individual might belong to different communities...
</text>

cf. <cite>Palla et al. 2005</cite>

A community = A connected k-clique component
++ A k-clique is a fully-connected subgraph with k nodes. (e.g. triangles are 3-cliques
++ two k-cliques are adjacent if they share k-1 nodes 
(communities can overlap, but not by more than k-2 nodes)

Results depend on the value of k
- k too large: separate communities
- k too small: too large communities (k=2 == connected components)

</document>


<document>
<tag>community-detection-notes</tag>
<title>Bibliographic notes</title>

<text>
++ Textbook <cite>Newman 2010</cite>
</text>

<text>
Spectral properties <cite>Newman 2006</cite>
</text>

<text>
Hierarchy of smaller modules within large modules <cite>Blondel et al. 2008</cite>
</text>

<text>
Overlapping communities, where nodes can be central to more than one community <cite>Palla et al. 2005</cite>
</text>

<text>
++ Survey <cite>Fortunato 2010</cite>
</text>

<text>
++ Leskovec et al. 2010
 author = {Leskovec, Jure and Lang, Kevin J. and Mahoney, Michael},
 title = {Empirical comparison of algorithms for network community detection},
 booktitle = {Proceedings of the 19th International Conference on the World Wide Web},
 series = {WWW '10},
 year = {2010},
 isbn = {978-1-60558-799-8},
 location = {Raleigh, North Carolina, USA},
 pages = {631--640},
 doi = {http://doi.acm.org/10.1145/1772690.1772755},
</text>

<text>
Chayant Tantipathananandh, Tanya Berger-Wolf, David Kempe A Framework for Community Identification in Dynamic Social Networks. KDD 2007, San Jose, CA.

<cite>Newman 2006</cite>

R. Kumar, P. Raghavan, S. Rajagopalan, A. Tomkins. Trawling the web for emerging cyber-communities. 8th International World Wide Web Conference, May 1999.

A. Clauset. Finding local community structures in networks. Phys Rev E Stat Nonlin Soft Matter Phys. 2005 Aug;72(2 Pt 2):026132. 2005.

Hopcroft, O. Khan, B. Kulis, and B. Selman. Natural communities in large linked networks. In Proceedings of the 9th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, pages 541--546,

Ravi Kannan, Santos Vempala, Adrian Vetta, On clusterings: good, bad and spectral. Journal of the ACM (JACM) 51(3), 497--515, 2004.

E. A. Leicht, Petter Holme, and M. E. J. Newman, Vertex similarity in networks, Phys. Rev. E 73, 026120 (2006).

<cite>Newman and Girvan 2004</cite>

<cite>Newman 2004a</cite>

C. Faloutsos, K. McCurley and A. Tomkins. Fast Discovery of Connection Subgraphs. In Tenth ACM SIGKDD Conference, Seattle, WA, 2004.

Satu Elisa Schaeffer. Graph Clustering. Computer Science Review 1(1):27-64,2007.
</text>



</document>


</document>
