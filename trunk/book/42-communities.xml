<?xml version="1.0"  encoding="ISO-8859-1" ?> 
<!DOCTYPE sys-ents [ <!ENTITY bibliography SYSTEM "bibliography.xml"> ]> 
<?xml-stylesheet type="text/xsl" href="../book.xsl"?>


<document>
&bibliography;
<title>Community Detection</title>

<text>
Specific aspects of the general idea of social group have led to more precise network definitions: cliques and their generalizations in graph theoretic terms, interacting communities, social circles, and structures of affiliation.
</text>

<text>
++ Identification of various kinds of subgraphs, i.e. communities
</text>

<text>
Applications: Web communities representing groups with a common interest, communities of named entities in text documents (e.g. people and organizations), social phenomena in e-mail communications, friendships in social networks...
</text>

<text>
1) people literally choose to people like them (sorting, what sociologists call homophily)
2) we also change our behavior to match that of people around us (peer effects)
both mechanisms create groups of people who look similar to one another

e.g. 
- Thomas Schelling's tipping model (racial segregation),
- Mark Granovetter (people's willingness to participate in some sort of collective behavior: riots, political uprisings,social movement...)
- John Miller and Scott Page's standing ovation model (a model of peer effects where you change your behavior to match that of others around you)
</text>

<text>
GRAPH PARTITIONING, from <cite>Skiena 2008</cite>:

APPLICATIONS:

- Clustering: Graph partition also arises when we need to cluster the vertices into logical components. If edges link “similar” pairs of objects, the clusters remaining after partition should reflect coherent groupings.

- Divide and conquer arises in many divide-and-conquer algorithms, which gain their efficiency by breaking problems into equal-sized pieces such that the respective solutions can easily be reassembled. Minimizing the number of edges cut in the partition usually simplifies the task of merging

- Parallel algorithms. Consider the finite element method, which is used to compute the physical properties (such
as stress and heat transfer) of  geometric models. Parallelizing such calculations requires partitioning the models into equal-sized pieces whose interface is small. This is a graph-partitioning problem, since the topology of a geometric model is
usually represented using a graph.

- Data locality: Large graphs are often partitioned into reasonable-sized pieces to improve data locality 

- Drawing: or make less cluttered drawings.
</text>



<document>
<tag>community-detection-partitioning</tag>
<title>Graph partitioning</title>

<text>
GRAPH PARTITIONING HEURISTICS

- Local improvement heuristics for graph partitioning (.e.g sweep through the vertices, deciding
whether the size of the cut would improve if we moved this vertex over to the other
side) are due to Kernighan-Lin [KL70] and Fiduccia-Mattheyses [FM82].

- Spectral partitioning methods use sophisticated linear algebra techniques to
obtain a good partitioning. The spectral bisection method uses the second-lowest
eigenvector of the Laplacian matrix of the graph to partition it into two pieces. 
Spectral methods for graph partition are discussed in [Chu97, PSL90]. 

When more than two components are desired, the partitioning heuristic should
be applied recursively.

Empirical results on graph partitioning heuristics include [BG95, LR93].
</text>

<document>
<tag>community-detection-kernighan-lin</tag>
<title>The Kernighan-Lin algorithm</title>
</document>

<document>
<tag>community-detection-spectral</tag>
<title>Spectral partitioning</title>
</document>

</document>



<document>
<tag>community-detection-modularity</tag>
<title>Modularity maximization methods</title>

<document>
<tag>community-detection-modularity-simple</tag>
<title>Simple modularity maximization</title>
</document>

<document>
<tag>community-detection-modularity-spectral</tag>
<title>Spectral modularity maximization</title>
</document>

</document>



<document>
<tag>community-detection-betweenness</tag>
<title>Betweenness-based methods</title>

</document>



<document>
<tag>community-detection-hierarchical</tag>
<title>Hierarchical clustering</title>

</document>



<document>
<tag>community-detection-notes</tag>
<title>Bibliographic notes</title>

<text>
++ Textbook <cite>Newman 2010</cite>
</text>

<text>
Spectral properties <cite>Newman 2006</cite>
</text>

<text>
Hierarchy of smaller modules within large modules <cite>Blondel et al. 2008</cite>
</text>

<text>
Overlapping communities, where nodes can be central to more than one community <cite>Palla et al. 2005</cite>
</text>

<text>
++ Survey <cite>Fortunato 2010</cite>
</text>



</document>


</document>
