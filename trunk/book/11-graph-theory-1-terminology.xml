<?xml version="1.0"  encoding="ISO-8859-1" ?> 
<?xml-stylesheet type="text/xsl" href="../book.xsl"?>


<document>
<tag>graph-theory-fundamentals</tag>
<title>Graphs and their terminology</title>


<text>
From a formal point of view, a <term>graph</term> <eqn>G=(V,E)</eqn> is a finite non-empty set <eqn>V</eqn> of vertices together with a possibly empty set <eqn>E</eqn> of 2-element subsets of <eqn>V</eqn> called edges. A graph <eqn>G=(V,E)</eqn>, therefore, has a <term>vertex set</term> <eqn>V</eqn> and an <term>edge set</term> <eqn>E</eqn>, which are often denoted by <eqn>V(G)</eqn> and <eqn>E(G)</eqn>, respectively. Vertices are often referred to as points or, more commonly, nodes. Edges are sometimes called lines or links. When talking about networks, we will prefer the terms nodes and links.
</text>

<text>
++ nodes and links: Vertices and edges are also called nodes and links in computer science, points and lines in older graph theory textbooks, sites and bonds in physics, and actors and ties in social network analysis.
</text>

<text>
Nodes (vertices) correspond to the elements of the system represented by the graph, whereas links (edges) represent their connections. In a social network, for instance, people are represented as nodes while friendship relationships are represented by links between pairs of nodes. In practice, we will restrict ourselves to dyadic (pairwise) relationships when representing graphs.
</text>

<text>
SNA: nodes/points, edges/lines
</text>

<text>
Any member <eqn>e={u,v}</eqn> of <eqn>E(G)</eqn> is an <term>edge</term> in <eqn>G</eqn> with end vertices <eqn>u</eqn> and <eqn>v</eqn>. Both <eqn>u</eqn> and <eqn>v</eqn> are incident with the edge <eqn>e</eqn>, and the edge is incident with them.

An edge <eqn>e={u,v}</eqn> is said to join <eqn>u</eqn> and <eqn>v</eqn> and can be denoted by <eqn>uv</eqn> or <eqn>vu</eqn>. 
</text>

<text>
A self-edge, self-loop, or <term>loop</term> for short, is an edge <eqn>vv</eqn> from one vertex <eqn>v</eqn> to itself (a.k.a. reflexive tie in SNA)
</text>


<text>
When <eqn>{u,v}</eqn> is an edge in <eqn>G</eqn>, <eqn>u</eqn> and <eqn>v</eqn> are adjacent vertices and they are said to be neighbors of each other. Likewise, when both <eqn>{u,v}</eqn> and <eqn>{v,w}</eqn> are edges in <eqn>G</eqn>, they are said to be adjacent edges.
</text>

<text>
The number of vertices in the graph is the <term>order</term> of the graph, whereas the number of edges in the graph is the <term>size</term> of the graph. Following the common notation in the literature, we will use <eqn>n</eqn> to denote the order of the graph (i.e. its number of nodes) and <eqn>m</eqn> to denote its size (i.e. its number of links).
</text>

<text>
++ Drawing a graph as a diagram: Each point (or small circle) represents a node and two points are joined by a line if the corresponding nodes are joined by an edge in the graph. (a.k.a. sociogram in SNA)
</text>


<text>
{V \choose 2} the set of all pairs of its vertices. 
The graph \overline{G} = (V, {V \choose 2} \ E) is the <term>complementary graph</term>. 
Two vertices of V are adjacent in G if and only if they are not adjacent in \overline{G}
</text>

<text>
The <term>line graph</term> L(G) of a graph G has as vertices the edges of G; two edges
of G are adjacent in L(G) if and only if they have a common vertex in G. For
example, the line graph of the complete graph Kn is the triangular graph Tn
</text>


<!-- Multigraphs -->

<document>
<tag>graph-theory-multi</tag>
<title>Multigraphs</title>

<text>
In multigraphs, there are pairs of vertices that are connected by more than one edge. An edge is said to be a multiedge when it appears more than once in the same graph (i.e. multigraph). 
</text>

<text>
In multigraphs, we replace the edge set of an ordinary graph by a family <eqn>E</eqn> of two-element subsets of <eqn>V</eqn>. 
Formally, we define a <term>multigraph</term> as a triple <eqn>(V, E, J)</eqn> where <eqn>J</eqn> is a mapping from <eqn>E</eqn> to the set of two-element subsets of <eqn>V</eqn>, so that we can distinguish different edges connecting the same pair of vertices. <eqn>J</eqn> is called the incidence map because the image <eqn>J(e)</eqn> of an edge <eqn>e</eqn> is the set <eqn>{u, v}</eqn> of the end vertices of <eqn>e</eqn>.
</text>

<text>
When <eqn>J(e) = J(e')</eqn>, we say that edges <eqn>e</eqn> and <eqn>e'</eqn> are <term>parallel edges</term>.
</text>

<text>
Multigraphs can be generalized if we allow loops, i.e. edges <eqn>e</eqn> whose <eqn>J(e)</eqn> is a singleton set <eqn>{v}</eqn>. A structure that allows both parallel edges and loops is often called <term>pseudographs</term>.
</text>

<text>
A graph without multiedges nor self-loops is called a <term>simple graph</term>. Multiedges and self-loops introduce some subtetlies in the design of graph algorithms, hence simple graphs are often preferred.
</text>

<text>
An alternative representation: Multiple relations <eqn>E^+ = {E_1, .. E_r}</eqn>, where r is the number of relations, i.e. a multigraph as a set of parallel graphs
</text>

</document>


<!-- Hypergraphs -->

<document>
<tag>graph-theory-hyper</tag>
<title>Hypergraphs</title>

<text>
Ties among subsets of actors (e.g. affiliation networks, as two-mode networks). In sociology, such networks are called "affiliation networks"...

e.g. Directors sitting on the boards of companies, scientists coauthoring papers, film actors appearing together in films, people attending social events, members of a familia or any other kind of social group, users who like a particular item in a recommender system, words appearing in documents in an information retrieval system, train routes connecting stations, metabolites participating in metabolic reactions...
</text>

<text>
N:  generalized kind of edge that joins more than two vertices (We could just use ordinary edges joining vertex pairs to represent our family ties, placing an edge between any two vertices that correspond to individuals in the same family. This, however, doesn’t explicitly tell us when two edges correspond to ties within the same family, and there is no single object in the network that corresponds to a family the way a hyperedge does in the hypergraph. In a number of ways, therefore, the hypergraph is more convenient). Such an edge is called a hyperedge and a network with hyperedges is called a hypergraph. 
</text>

<text>
Wikipedia: hypergraph is a generalization of a graph, where an edge can connect any number of vertices. Formally, a hypergraph H is a pair H = (X,E) where X is a set of elements, called nodes or vertices, and E is a set of non-empty subsets of X called hyperedges or links. Therefore, E is a subset of <eqn>2^X/{\emptyset}</eqn>, where <eqn>2^X</eqn> is the power set of X.
</text>

<text>
Mathematically, hypergraphs can be viewed as incidence structures and vice versa. 
</text>

<text>
In cooperative game theory, hypergraphs are called simple games (voting games); this notion is applied to solve problems in social choice theory.
</text>

<text>
Dual hypergraph, a hypergraph whose vertices and edges are exchanged: <eqn>G^*=(E,V)</eqn> from <eqn>G=(V,E)</eqn>
</text>

<text>
Higraphs (hierarchical graphs) as a more useful alternative in practice...

higraph is a diagramming object that formalizes relations into a visual structure, it was developed by David Harel in 1988. Higraphs extend mathematical graphs by including notions of depth and orthogonality. In particular, nodes in a higraph can contain other nodes inside them, creating a hierarchy. The idea was initially developed for applications to databases, knowledge representation, and the behavioral specification of complex concurrent systems using the higraph-based language of statecharts.
Higraphs are widely used in industrial applications like UML
[Harel, D., 1988, "On Visual Formalisms", Communications of the ACM, 31(5): 514-530.]
</text>

</document>

<!-- Undirected / directed -->

<document>
<tag>graph-theory-directed</tag>
<title>Directed graphs (a.k.a. digraphs)</title>

<text>
N: directed network or directed graph, also called a digraph for short, is a network in which each edge has a direction, pointing from one vertex to another. Such edges are themselves called directed edges, and can be represented by lines with arrows on them... We can, if we wish, think of undirected networks as directed networks in which each undirected edge has been replaced with two directed ones running in opposite directions between the same pair of vertices. The adjacency matrix for such a network is then symmetric and exactly the same as for the original undirected network
</text>

<text>
From a formal point of view, a directed graph <eqn>G=(V,E)</eqn> is a finite non-empty set <eqn>V</eqn> of vertices (or nodes) together with a possibly empty set <eqn>E</eqn> of ordered pairs of vertices called directed edges (also known as arcs). In other words, <eqn>V \neq \emptyset</eqn> and <eqn>E \subseteq V \times V</eqn>. Henceforth, we will stick to this definition both for directed and undirected graphs.
</text>

<text>
In scenarios such as the social network mentioned at the beginning of this section, where we consider friendship relationships to be symmetric, links will be undirected. In undirected graphs, therefore, edges are two-element subsets of <eqn>V(G)</eqn>. An edge <eqn>{u,v}</eqn> can then be denoted as <eqn>uv</eqn> or <eqn>vu</eqn>, since both are considered to be equivalent. In other words, both <eqn>(u,v)</eqn> and <eqn>(v,u)</eqn> belong to <eqn>E(G)</eqn> as defined above.
</text>


<text>
++ Directed graphs (= digraphs): undirected graphs for nondirectional links, directed graphs for directional links.

Examples (many applications concerning traffic and transportation networks): road networks (lanes in both directions) are undirected vs. street networks within cities (typically directed due to one-way streets; program flow graphs are typically directed (dependences), WWW links, citation networks, food webs (energy flow from prey to predator)...
</text>

<text>
J: Formally, a directed graph or, for short, a digraph is a pair G = (V,E) consisting of a finite set V and a set
E of ordered pairs (a, b), where a \neq b are elements of V. The term arc is usually employed instead
of edge to distinguish between the directed and the undirected case. 

Instead of e = (a, b), we again write e = ab; a is called the start vertex or tail, and b the end vertex or head of e; i.e. <eqn>tail \rightarrow head</eqn>. We say that a and b are incident with e, and call two edges of the form ab and ba antiparallel. 

(u,v): u is said to be adjacent to v and v is said to be adjacent from u (in undirected graphs: nodes adjacent WITH edges, rather than TO/FROM edges).
</text>

<text>
++ Drawing: To draw a directed graph, we proceed as in the undirected case, but indicate the direction of a directed edge by an arrowhead.
</text>

<text>
J: "Replacing each directed edge of the form (a, b) by an undirected edge {a, b}, we obtain the underlying multigraph |G|. Replacing parallel
edges in |G| by a single edge, we get the underlying graph (G). Conversely, let G = (V,E) be a multigraph. Any directed multigraph H with |H| = G is
called an orientation of G. Replacing each edge ab in E by two arcs (a, b) and (b, a), we get the associated directed multigraph
\overrightarrow{G}; we also call \overrightarrow{G} G the complete orientation of G. "
</text>

<text>
We say that a digraph G is symmetric if,whenever (u,v) is an arc of G, then (v,u) is also an arc of G. We say that a digraph is oriented if, whenever (u,v) is an arc of G, then (v,u) is not an arc of G.
</text>

<text>
++The converse graph: arcs reversed...
</text>


</document>


<!-- Weighted graphs -->

<document>
<tag>graph-theory-weighted</tag>
<title>Weighted graphs</title>

<text>
++ Binary vs. weighted graphs: binary graphs for dichotomous links (ties are either present or absent for each pair of nodes), weighted graphs for valued links (that indicate the strength, intensity, or frequency of the tie between each pair of actors). Binary graphs, also known as unweighted graphs...

a.k.a. valued graphs

- Each edge is assigned a numerical value or weigth; e.g. road network (length, traversal time, construction cost, speed limit...)
</text>

<text>
++ signed graphs <eqn>G_\pm = (G,E,v)</eqn>
- valences v: <eqn>E \rightarrow {+,-}</eqn> 
- sign of a cycle (product of the signs), useful for the study of balance
</text>

</document>



<!-- Labeled graphs -->

<document>
<tag>graph-theory-label</tag>
<title>Labeled graphs and attribute graphs</title>

<text>
++ Labeled graphs: Each vertex is assigned a name or identifier (may not be unique). Note: the index of a node within the graph is often employed as a surrogate for the node identifier (for convenience when implementing efficient algorithms and also for preserving anonymity in some applications).
</text>

<text>
++ Attribute graphs @ attributes at nodes and edges
</text>

</document>

<!-- Dynamic graphs -->

<document>
<tag>graph-theory-dynamic</tag>
<title>Dynamic graphs</title>

<text>
In a static graph, the properties of nodes, links, and mapping function
remain unchanged over time. For example, the number of nodes and links remains
constant, and the mapping function does not change. In a dynamic graph, the number
of nodes and links, the shape of the mapping function, and perhaps other properties of
the graph change over time. For example, the values assigned to nodes and links, as
well as the number of nodes and links, may vary.
</text>

<text>
L: A graph is a 3-tuple: G = (N,L,f), where N is a set of nodes, L is a set of links, and f is a mapping function (table) that maps links onto node pairs. Nodes directly connected by a link are called adjacent nodes. A static graph
retains its initial structure, forever. A dynamic graph changes its nodes,
links, and/or mapping function over time.
</text>

</document>

<!-- Networks -->


<document>
<tag>graph-theory-network</tag>
<title>Networks</title>

<text>
L: The structure portion of a network is easily modeled by graph theory.

L: Specifically, the network itself can be defined in terms of a set, G = {N, L, f}, where N is a set of nodes, L a set of links, and f : N - N a mapping function that defines the structure of G—how nodes are connected to each other through links. The mapping function contains enough information to draw the graph on a planar piece of paper using dots as nodes and lines as links.
</text>

<text>
Graph theory, however, is inadequate to define the second key ingredient of a network: its dynamic behavior.

L: The dynamic portion of a network is defined by a set of microrules governing the behavior of nodes and links. These rules are given at the microlevel, to distinguish them from macrolevel behaviors of networks. Specifically, microlevel rules dictate the behavior of links and nodes, and macrolevel rules dictate the emergence of global properties of a network. For example, preferential attachment—links are attracted to nodes with a lot of links, already—is a microrule, whereas the power law describing the degree sequence distribution of a network is a macrolevel rule. As network scientists, we are concerned mainly with understanding macrolevel properties by studying microrules—and sometimes the reverse.

L: A complete definition of network G must include both structural and behavioral information. For example, G(t) = { N(t), L(t), f(t) } is a set-theoretic definition of network G with a dynamic dimension 


L: G(t) is a function of time t and the number, values, and mappings of nodes and links as they change with time. The
actual behaviors of G(t) are expressed algorithmically, typically in the form of a computer algorithm. 

L: Definition of Network as a 3-tupleG(t) = ( N(t), L(t), f(t), J(t) ) where, 
t - time, simulated or real
N - nodes, also known as vertices or “actors”
L - links, also known as edges
f : N - N - topology: mapping function that connects nodepairs, yielding topology
J - algorithm for describing behaviors of nodes and links versus time (microrules)

N, L, and f and time-varying in dynamic networks.

MT: A macro-level model explains how the world works with an equation. Micro-level models are called agent-based models.
1. Agents: The objects of our model, i.e. a set of autonomous agents (who might decide to collaborate)
2. Behavior: Agent behavior: rules they follow (might be pretty simple).
3. Outcome: When agents follow their rules, it creates something at the macro level, sometimes surprising [emergence]
</text>

</document>

</document>


