<?xml version="1.0"  encoding="ISO-8859-1" ?> 
<?xml-stylesheet type="text/xsl" href="../book.xsl"?>

<document>
<tag>graph-visualization-techniques</tag>
<title>Graph drawing techniques</title>

<text>
Ill-defined problem: Draw a graph G so as to accurately reflect its structure (and the drawing is aesthetically pleasing).
</text>

<text>
Vertex: point in the plane
Edge: straight-line drawing (segments), polyine drawing (polygonal chains), orthogonal drawing (alternating horizontal and vertical segments), curve drawing (e.g. splines)
</text>

<text>
Suitable for small and medium-sized networks...

1600x1200 pixels to display thousand of edges results in just a blob (interactive visualization might help to explore the neighborhood of a given set of nodes, though)
</text>


<text>
Potential evaluation, and often conflicting, criteria (warning! not an optimization problem):

- as few crossing edges as possible, since they can be confusing (computing the crossing number of a graph is NP-complete)
- compact drawing (judicious use of white space)
- aspect ratio (width/height suitable for the desired output device)
- avoid long edges (hard to follow, obscure details)
- avoid small angles (overlap, poor printing/visualization on screen)
- readability
</text>

<text>
EVALUATION: Aesthetic criteria

- analysis of human-drawn diagrams <cite>Tamassia et al. 1988</cite>

- experimental studies on human understanding of diagrams <cite>Purchase et al. 2002</cite> <cite>Purchase et al. 2004</cite>

- experimental studies of graph drawing algorithms <cite>Vismara et al. 2000</cite>


</text>



<text>
Design decisions 
SKIENA 2008 
"Must the edges be straight, or can I have curves and/or bends? 
- Straight-line drawing algorithms are relatively simple, but have their limitations. 
- Orthogonal polyline drawings seem to work best to visualize complicated graphs such as circuit designs. Orthogonal means that all lines must be drawn either horizontal or vertical, with no intermediate slopes.
- Polyline means that each graph edge is represented by a chain of straight-line segments, connected by
vertices or bends.


- Is there a natural, application-specific drawing? - If your graph represents a
network of cities and roads, you are unlikely to find a better drawing than
placing the vertices in the same position as the cities on a map. This same
principle holds for many different applications.

- Is your graph either planar or a tree? - If so, use one of the special planar
graph or tree drawing algorithms of Sections 15.11 and 15.12.

- Is your graph directed? - Edge direction has a significant impact on the nature
of the desired drawing. When drawing directed acyclic graphs (DAGs), it is
often important that all edges flow in a logical direction—perhaps left-right
or top-down.

- How fast must your algorithm be? - Your graph drawing algorithm had better
be very fast if it will be used for interactive update and display. You are
presumably limited to using incremental algorithms, which change the vertex
positions only in the immediate neighborhood of the edited vertex. You can
afford more time for optimization if instead you are printing a pretty picture
for extended study.

- Does your graph contain symmetries? - The output drawing above is attractive
because the graph contains symmetries—namely two vertices identically
connected to a core K5. The inherent symmetries in a graph can be identified
by computing its automorphisms, or self-isomorphisms. Graph isomorphism
codes (see Section 16.9 (page 550)) can be readily used to find all automorphisms.


- Drawing your graph opens another can of worms, namely where to place the
edge/vertex labels. We seek to position labels very close to the edges or vertices
they identify, and yet to place them such that they do not overlap each other or
other important graph features. Optimizing label placement can be shown to be
an NP-complete problem, but heuristics related to bin packing can be effectively used. 
Map-labeling heuristics are described in <cite>Been et al. 2006</cite> and <cite>Wagner and Wolff 1995</cite>.
</text>

<text>
Interative tools: Algorithms designed to preserve the user's mental map during data exploration session <cite>Kaufmann and Wiese 2002</cite>
(however, it can lead, after a certain number of exploration steps, to drawings that are much less readable than those constructed with another algorithm, as in the Hermes system <cite>Carmignani et al. 2002</cite> designed to explore the Internet topology).
</text>

<text>
QUICK AND DIRTY DRAWING: 
"simply spacing the vertices
evenly on a circle, and then drawing the edges as straight lines between vertices.
Such drawings are easy to program and fast to construct. They have the substantial
advantage that no two edges will obscure each other, since no three vertices will be
collinear. Such artifacts can be hard to avoid as soon as you allow internal vertices
into your drawing. An unexpected pleasure with circular drawings is the symmetry
sometimes revealed because vertices appear in the order they were inserted into
the graph. Simulated annealing can be used to permute the circular vertex order
to minimize crossings or edge length, and thus significantly improve the drawing."
</text>


</document>
